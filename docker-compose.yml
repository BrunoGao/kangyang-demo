services:
  # 数据库服务
  mysql:
    image: mysql:8.0
    container_name: kangyang-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-kangyang}
      MYSQL_USER: ${MYSQL_USER:-kangyang}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-kangyang123}
      TZ: Asia/Shanghai
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - kangyang-network

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: kangyang-redis
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5
    networks:
      - kangyang-network

  # AI检测服务
  ai-detection:
    build: 
      context: ./ai-detection
      dockerfile: Dockerfile
    container_name: kangyang-ai
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      FLASK_ENV: production
      TZ: Asia/Shanghai
    ports:
      - "${AI_PORT:-5000}:5000"
    volumes:
      - ./ai-detection/logs:/app/logs
      - ./videos:/app/videos:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - kangyang-network

  # Spring Boot后端服务
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: kangyang-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE:-kangyang}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:-kangyang}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-kangyang123}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      JAVA_OPTS: "-Xmx512m -Xms256m"
      TZ: Asia/Shanghai
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kangyang-network

  # 管理后台前端
  admin-frontend:
    build: 
      context: ./frontend/admin
      dockerfile: Dockerfile
    container_name: kangyang-admin
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "${ADMIN_PORT:-80}:80"
    depends_on:
      - backend
    networks:
      - kangyang-network

  # 监控大屏前端
  monitor-frontend:
    build: 
      context: ./frontend/monitor
      dockerfile: Dockerfile
    container_name: kangyang-monitor
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "${MONITOR_PORT:-81}:80"
    depends_on:
      - backend
    networks:
      - kangyang-network

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: kangyang-nginx
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - admin-frontend
      - monitor-frontend
      - backend
    networks:
      - kangyang-network
    profiles:
      - nginx

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  kangyang-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16